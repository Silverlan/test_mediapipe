name: Build Mediapipe - Windows

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Chocolatey
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

      - name: Uninstall existing Bazel
        shell: powershell
        run: |
          try {
            choco uninstall bazel -y
          }
          catch {
            Write-Host "Bazel not installed, moving on"
          }

      - name: Install Bazel 6.4.0
        shell: powershell
        run: |
          choco install bazel --version 6.4.0 -y

      - name: Install Python 3.12.0
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.0' 

      - name: Install MSYS2
        shell: powershell
        run: |
          choco install msys2 -y

      - name: Download and extract OpenCV
        shell: powershell
        run: |
          $zipUrl = "https://github.com/Silverlan/opencv-3.4.10-winx64/releases/download/v3.4.10/opencv-3.4.10-winx64.zip"
          $zipFile = "$env:TEMP\opencv.zip"
          Write-Host "Downloading OpenCV from $zipUrl..."
          Invoke-WebRequest -Uri $zipUrl -OutFile $zipFile
          $dest = "C:\opencv"
          Write-Host "Extracting to $dest..."
          Expand-Archive -Path $zipFile -DestinationPath $dest -Force

      - name: Clone Mediapipe
        shell: powershell
        run: |
          git clone https://github.com/Silverlan/mediapipe.git
          cd mediapipe
          git checkout 9ea1acfd70ae0679c05c6c44871a4be5abc16ad7

      - name: Clone mediapipe_pragma_wrapper
        uses: actions/checkout@v3
        with:
          repository: Silverlan/mediapipe_pragma_wrapper
          token: ${{ secrets.PRAGMA_MEDIAPIPE_WRAPPER_ACCESS_TOKEN }}
          path: mediapipe_pragma_wrapper
          ref: 706bb851bab9e0b54ce2113a9a236f5fecab30c4

      - name: Merge mediapipe_pragma_wrapper files
        shell: bash
        run: |
          cp -rfa mediapipe_pragma_wrapper/. mediapipe/

      - name: Build Mediapipe
        shell: powershell
        run: |
          $env:BAZEL_SH="C:\msys64\usr\bin\bash.exe"
          $env:BAZEL_OUTPUT_ROOT="C:/_bazel"
          
          if (-Not (Test-Path $env:BAZEL_OUTPUT_ROOT)) {
            New-Item -ItemType Directory -Path $env:BAZEL_OUTPUT_ROOT | Out-Null
          }

          # Install distutils
          python3 -m ensurepip --default-pip
          python3 -m pip install --upgrade setuptools

          # Install numpy
          python -m pip install numpy

          # Set Python path
          $env:PYTHON_BIN_PATH = (Get-Command python3).Source -replace '\\', '/'

          pushd mediapipe
          bazel.exe --output_user_root="$env:BAZEL_OUTPUT_ROOT" build -c opt --action_env=BAZEL_CXXOPTS="/std:c++20" --define MEDIAPIPE_DISABLE_GPU=1 mediapipe/examples/desktop/mediapipe_pragma_wrapper:mediapipe_pragma_wrapper --verbose_failures --experimental_cc_shared_library
          popd

      - name: Get Bazel Output Directory
        shell: bash
        id: get-bazel-output-dir
        run: |
          curDir=$(pwd)
          bazelDir="C:/_bazel"

          so_path=$(find "$bazelDir" -name "mediapipe_pragma_wrapper.dll" | head -n 1)

          if [ -z "$so_path" ]; then
            echo "File mediapipe_pragma_wrapper.dll not found in $bazelDir."
            exit 1
          fi

          echo "Found mediapipe_pragma_wrapper.dll at: $so_path"

          # Extract the top-level directory relative to curDir/_bazel where the .so file was found.
          # This is done by removing the prefix "$curDir/_bazel/" from the file's path and taking the first directory element.
          relative_path=${so_path#"$bazelDir/"}
          top_level_dir=$(echo "$relative_path" | cut -d'/' -f1)

          # Set the additional path variable to the directory: bazelDir/topLevelDirOfPathOfSoFile
          additional_path="$bazelDir/$top_level_dir"

          echo "Additional path: $additional_path"

          # List all files within the additional directory
          echo "Listing files in $additional_path:"
          ls "$additional_path" -R

          echo "output-dir=$additional_path" >> $GITHUB_OUTPUT

      - name: Generate Release Files
        shell: bash
        run: |
          mkdir -p release/data
          bazel_out_dir="${{ steps.get-bazel-output-dir.outputs.output-dir }}"
          mpw_dir="$bazel_out_dir/execroot/mediapipe/bazel-out/x64_windows-opt/bin/mediapipe/examples/desktop/mediapipe_pragma_wrapper"

          cp "$mpw_dir/mediapipe_pragma_wrapper.dll" release/
          cp "$mpw_dir/mediapipe_pragma_wrapper.if.lib" release/
          cp "$mpw_dir/opencv_world3410.dll" release/

          asset_dir="$bazel_out_dir/execroot/mediapipe/bazel-out/x64_windows-opt/bin/mediapipe/tasks/testdata/vision"
          asset_out_dir="release/data/"
          cp "$asset_dir"/*.{tflite,task} "$asset_out_dir"

          zip -r binaries-win64.zip release

      - name: Publish Release
        uses: Silverlan/Releaser/releaser/composite@main
        with:
          tag: nightly
          token: ${{ secrets.GITHUB_TOKEN }}
          files: "binaries-win64.zip"




      - name: Build Mediapipe Debug
        shell: powershell
        run: |
          $env:BAZEL_SH="C:\msys64\usr\bin\bash.exe"
          $env:BAZEL_OUTPUT_ROOT="C:/_bazel_dbg"
          
          if (-Not (Test-Path $env:BAZEL_OUTPUT_ROOT)) {
            New-Item -ItemType Directory -Path $env:BAZEL_OUTPUT_ROOT | Out-Null
          }

          # Install distutils
          python3 -m ensurepip --default-pip
          python3 -m pip install --upgrade setuptools

          # Install numpy
          python -m pip install numpy

          # Set Python path
          $env:PYTHON_BIN_PATH = (Get-Command python3).Source -replace '\\', '/'

          pushd mediapipe
          bazel.exe --output_user_root="$env:BAZEL_OUTPUT_ROOT" build -c dbg --action_env=BAZEL_CXXOPTS="/std:c++20" --define MEDIAPIPE_DISABLE_GPU=1 mediapipe/examples/desktop/mediapipe_pragma_wrapper:mediapipe_pragma_wrapper --verbose_failures --experimental_cc_shared_library
          popd

      - name: Get Bazel Output Directory Debug
        shell: bash
        run: |
          curDir=$(pwd)
          bazelDir="C:/_bazel_dbg"

          so_path=$(find "$bazelDir" -name "mediapipe_pragma_wrapper.dll" | head -n 1)

          if [ -z "$so_path" ]; then
            echo "File mediapipe_pragma_wrapper.dll not found in $bazelDir."
            exit 1
          fi

          echo "Found mediapipe_pragma_wrapper.dll at: $so_path"

          # Extract the top-level directory relative to curDir/_bazel_dbg where the .so file was found.
          # This is done by removing the prefix "$curDir/_bazel_dbg/" from the file's path and taking the first directory element.
          relative_path=${so_path#"$bazelDir/"}
          top_level_dir=$(echo "$relative_path" | cut -d'/' -f1)

          # Set the additional path variable to the directory: bazelDir/topLevelDirOfPathOfSoFile
          additional_path="$bazelDir/$top_level_dir"

          echo "Additional path: $additional_path"

          # List all files within the additional directory
          echo "Listing files in $additional_path:"
          ls "$additional_path" -R

          echo "output-dir=$additional_path" >> $GITHUB_OUTPUT

      - name: Handle Error
        uses: Silverlan/common_actions/action_handle_error@main
        if: failure()
